// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider          = "prisma-zod-generator"
  isGenerateInclude = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------
// [FLOWS]
// 1. Create a User
// 2. User can create an Organization
//    - If User create an Organization, User will be the Owner of the Organization
//    - User can also invite other Users to join the Organization
//    - User can create a custom Role for the Organization and assign it to other Users
// 3. User create a Project
//    - User can invite other Users to join the Project
//    - User can also invite other Organizations to join the Project, it will invite all Users in the invited Organization
//    - User can create a custom Role for the Project and assign it to other Users and Organizations, if the role is assigned to an Organization, it will assign the role to all Users in the Organization
// 4. Inside a Project, User create a Board
//    - User can invite other Users to join the Board
//    - User can also invite other Organizations to join the Board, it will invite all Users in the invited Organization
//    - User can create a custom Role for the Board and assign it to other Users and Organizations, if the role is assigned to an Organization, it will assign the role to all Users in the Organization
// 5. Inside a Board, there is a set of Lists (e.g. TODO, IN PROGRESS, DONE) which each List has a set of Cards (e.g. Card 1, Card 2, Card 3)
// 6. Inside a Card, there is a set of Activities (e.g. Activity 1, Activity 2, Activity 3), it can be a comment, a file upload, a label change, etc.
//    - Activities can be created by Users, or System
//    - System Activities are created by the System, e.g. when a User is invited to a Project, the System will create an Activity to notify the User
//    - A card can mirror a Checklist from another card. All changes in the Checklist or in the mirrored one will be reflected to the other one.
//    - A card can also mirror an Attachment from another card. All changes in the Attachment or in the mirrored one will be reflected to the other one.
// ------------------------------

// ------------------------------
// [GLOBAL NOTES]
// - Junction tables are used to map many-to-many relationships, it only have `added_at` and `adder_id` fields
// ------------------------------

// ------------------------------
// [Roles]
// ------------------------------

enum RoleLevel {
  USER
  ORGANIZATION
  PROJECT
  BOARD
}

model Role {
  id          String    @id @default(uuid())
  name        String
  description String?
  level       RoleLevel

  // Global roles (e.g. Admin, Guest) will NOT have `organization_id`
  // Custom roles (e.g. Project Manager, Developer) will have `organization_id`
  organization_id String?
  organization    Organization? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now())
  creator_id String?
  creator    User?    @relation(name: "roles_created", fields: [creator_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modified_at DateTime @updatedAt
  modifier_id String?
  modifier    User?    @relation(name: "roles_modified", fields: [modifier_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // (User Level Permissions)
  // - These permissions are internal only, they are not exposed to the User
  VIEW_USER                     Boolean @default(false)
  EDIT_USER                     Boolean @default(false)
  DELETE_USER                   Boolean @default(false)
  ADD_ORGANIZATION_TO_USER      Boolean @default(false)
  REMOVE_ORGANIZATION_FROM_USER Boolean @default(false)

  // (Organization Level Permissions)
  // - Inherits all User Level Permissions
  // - Internal for organization members only
  EDIT_ORGANIZATION             Boolean @default(false)
  DELETE_ORGANIZATION           Boolean @default(false)
  ADD_USER_TO_ORGANIZATION      Boolean @default(false)
  REMOVE_USER_FROM_ORGANIZATION Boolean @default(false)
  CREATE_PROJECT                Boolean @default(false)

  // (Project Level Permissions)
  // - Applies to all projects within the organization
  // - Inherits all Organization, and User Level Permissions
  // - Works for collaborators & organization members
  VIEW_PROJECT                     Boolean @default(false)
  EDIT_PROJECT                     Boolean @default(false)
  DELETE_PROJECT                   Boolean @default(false)
  ADD_USER_TO_PROJECT              Boolean @default(false)
  REMOVE_USER_FROM_PROJECT         Boolean @default(false)
  ADD_ORGANIZATION_TO_PROJECT      Boolean @default(false)
  REMOVE_ORGANIZATION_FROM_PROJECT Boolean @default(false)
  CREATE_BOARD                     Boolean @default(false)

  // (Board Level Permissions)
  // - Applies to all boards within the organization
  // - Inherits all Project, Organization, and User Level Permissions
  // - Works for collaborators & organization members
  VIEW_BOARD                     Boolean @default(false)
  EDIT_BOARD                     Boolean @default(false)
  DELETE_BOARD                   Boolean @default(false)
  ADD_USER_TO_BOARD              Boolean @default(false)
  REMOVE_USER_FROM_BOARD         Boolean @default(false)
  ADD_ORGANIZATION_TO_BOARD      Boolean @default(false)
  REMOVE_ORGANIZATION_FROM_BOARD Boolean @default(false)
  CREATE_LIST                    Boolean @default(false)
  DELETE_LIST                    Boolean @default(false)
  CREATE_CARD                    Boolean @default(false)
  DELETE_CARD                    Boolean @default(false)

  users                 User[]
  organization_users    OrganizationUser[]
  project_users         ProjectUser[]
  project_organizations ProjectOrganization[]
  board_users           BoardUser[]
  board_organizations   BoardOrganization[]

  @@map("roles")
}

// ------------------------------
// [Labels]
// ------------------------------

model Label {
  id          String  @id @default(uuid())
  name        String
  description String?
  color       String?

  created_at DateTime @default(now())
  creator_id String?
  creator    User?    @relation(name: "labels_created", fields: [creator_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modified_at DateTime @updatedAt
  modifier_id String?
  modifier    User?    @relation(name: "labels_modified", fields: [modifier_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  cards CardLabel[]

  @@map("labels")
}

// ------------------------------
// [Attachments]
// ------------------------------

enum AttachmentProvider {
  LOCAL
  S3
}

model AttachmentStorage {
  id       String             @id @default(uuid())
  provider AttachmentProvider

  attachments Attachment[]

  @@map("attachment_storage")
}

model Attachment {
  id              String @id @default(uuid())
  title           String
  filename_disk   String
  filename_source String
  size            Int
  type            String

  storage_id String
  storage    AttachmentStorage @relation(fields: [storage_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  owner_id String
  owner    User   @relation(name: "attachments_owned", fields: [owner_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  uploaded_at DateTime @default(now())
  uploader_id String?
  uploader    User?    @relation(name: "attachments_created", fields: [uploader_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modified_at DateTime @updatedAt
  modifier_id String?
  modifier    User?    @relation(name: "attachments_modified", fields: [modifier_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  user_images User[] @relation("user_images")
  user_covers User[] @relation("user_covers")

  organizations Organization[] @relation("organization_logos")

  project_logos  Project[] @relation("project_logos")
  project_covers Project[] @relation("project_covers")

  card_covers Card[]

  cards_linked CardAttachment[]

  @@map("attachments")
}

// ------------------------------
// [Authentication]
// ------------------------------

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ------------------------------
// [Users]
// ------------------------------

model User {
  id       String  @id @default(uuid())
  name     String
  username String? @unique
  email    String  @unique
  phone    String?

  language             String  @default("en-US")
  subscribe_by_default Boolean @default(true)
  subscribe_to_email   Boolean @default(true)

  created_at  DateTime  @default(now())
  verified_at DateTime?
  modified_at DateTime  @updatedAt

  image_attachment_id String?
  image               Attachment? @relation(name: "user_images", fields: [image_attachment_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  cover_attachment_id String?     @unique
  cover               Attachment? @relation(name: "user_covers", fields: [cover_attachment_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // Roles
  roles_created  Role[] @relation("roles_created")
  roles_modified Role[] @relation("roles_modified")

  // Labels
  labels_created  Label[] @relation("labels_created")
  labels_modified Label[] @relation("labels_modified")

  // Attachments
  attachments          Attachment[] @relation("attachments_owned")
  attachments_created  Attachment[] @relation("attachments_created")
  attachments_modified Attachment[] @relation("attachments_modified")

  // Organizations
  organizations_owned    Organization[] @relation("organizations_owned")
  organizations_created  Organization[] @relation("organizations_created")
  organizations_modified Organization[] @relation("organizations_modified")

  organizations            OrganizationUser[] @relation("organizations_joined")
  organization_users_added OrganizationUser[] @relation("organization_users_added")

  // Projects
  projects_created  Project[] @relation("projects_created")
  projects_modified Project[] @relation("projects_modified")

  projects                    ProjectUser[]         @relation("projects_joined")
  project_users_added         ProjectUser[]         @relation("project_users_added")
  project_organizations_added ProjectOrganization[] @relation("project_organizations_added")

  // Boards
  boards_created  Board[] @relation("boards_created")
  boards_modified Board[] @relation("boards_modifier")

  boards                    BoardUser[]         @relation("boards_joined")
  board_users_added         BoardUser[]         @relation("board_users_added")
  board_organizations_added BoardOrganization[] @relation("board_organizations_added")

  // Lists
  lists_created  List[] @relation("lists_created")
  lists_modified List[] @relation("lists_modified")

  // Cards
  cards_created  Card[] @relation("cards_created")
  cards_modified Card[] @relation("cards_modified")

  cards            CardUser[] @relation("cards_joined")
  card_users_added CardUser[] @relation("card_users_added")

  card_timers_started CardTimer[] @relation("card_timers_started")
  card_timers_ended   CardTimer[] @relation("card_timers_ended")

  card_labels_created      CardLabel[]      @relation("card_labels_created")
  card_attachments_created CardAttachment[] @relation("card_attachments_created")

  // Checklists
  checklist_tasks            CardChecklistTaskUser[] @relation("checklist_tasks_joined")
  checklist_task_users_added CardChecklistTaskUser[] @relation("checklist_task_users_added")

  checklists_created  CardChecklist[] @relation("checklists_created")
  checklists_modified CardChecklist[] @relation("checklists_modified")

  checklist_tasks_created  CardChecklistTask[] @relation("checklist_tasks_created")
  checklist_tasks_modified CardChecklistTask[] @relation("checklist_tasks_modified")

  // Activities
  activities         Activity[]
  activities_created Activity[] @relation("activities_created")

  accounts UserAccount[]
  sessions UserSession[]

  @@map("users")
}

enum UserAccountProvider {
  oauth
  email
  credentials
}

model UserAccount {
  id      String @id @default(uuid())
  user_id String

  provider            String
  provider_account_id String
  type                UserAccountProvider

  scope         String?
  session_state String?

  token_id      String?
  token_type    String?
  refresh_token String?
  access_token  String?

  oauth_token_secret String?
  oauth_token        String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  expired_at Int?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, provider_account_id])
  @@map("user_accounts")
}

model UserSession {
  id            String @id @default(cuid())
  user_id       String
  session_token String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  expired_at DateTime

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_sessions")
}

// ------------------------------
// [Organizations]
// - Each organization has a list of users and projects
// - If an organization is deleted, all users and projects are deleted
// - If a project is assigned to an organization, all members within the organization are assigned to the project
// ------------------------------

model Organization {
  id          String  @id @default(uuid())
  name        String
  description String?

  owner_id String
  owner    User   @relation(name: "organizations_owned", fields: [owner_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  logo_attachment_id String?
  logo               Attachment? @relation(name: "organization_logos", fields: [logo_attachment_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  created_at DateTime @default(now())
  creator_id String?
  creator    User?    @relation(name: "organizations_created", fields: [creator_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modified_at DateTime @updatedAt
  modifier_id String?
  modifier    User?    @relation(name: "organizations_modified", fields: [modifier_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  projects          Project[]
  users             OrganizationUser[]
  boards            BoardOrganization[]
  external_projects ProjectOrganization[]
  custom_roles      Role[]

  @@map("organizations")
}

model OrganizationUser {
  id String @id @default(uuid())

  organization_id String
  organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  user_id String
  user    User   @relation(name: "organizations_joined", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  added_at DateTime @default(now())
  adder_id String?
  adder    User?    @relation(name: "organization_users_added", fields: [adder_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("organization_users")
}

// ------------------------------
// [Projects]
// - A project can be shared with multiple users and organizations
// ------------------------------

model Project {
  id          String    @id @default(nanoid(8))
  name        String
  description String?
  start_date  DateTime?
  due_date    DateTime?
  password    String?

  cover_attachment_id String?
  cover               Attachment? @relation(name: "project_covers", fields: [cover_attachment_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  logo_attachment_id String?
  logo               Attachment? @relation(name: "project_logos", fields: [logo_attachment_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  organization_id String
  organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  created_at DateTime @default(now())
  creator_id String?
  creator    User?    @relation(name: "projects_created", fields: [creator_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modified_at DateTime @updatedAt
  modifier_id String?
  modifier    User?    @relation(name: "projects_modified", fields: [modifier_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  boards        Board[]
  users         ProjectUser[]
  organizations ProjectOrganization[]

  @@map("projects")
}

model ProjectUser {
  id String @id @default(uuid())

  project_id String
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  user_id String
  user    User   @relation(name: "projects_joined", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  added_at DateTime @default(now())
  adder_id String?
  adder    User?    @relation(name: "project_users_added", fields: [adder_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("project_users")
}

model ProjectOrganization {
  id String @id @default(uuid())

  project_id String
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  organization_id String
  organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  added_at DateTime @default(now())
  adder_id String?
  adder    User?    @relation(name: "project_organizations_added", fields: [adder_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("project_organizations")
}

// ------------------------------
// [Boards]
// ------------------------------

model Board {
  id          String  @id @default(nanoid(8))
  name        String
  description String?
  locked      Boolean @default(false)
  password    String?

  project_id String
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now())
  creator_id String?
  creator    User?    @relation(name: "boards_created", fields: [creator_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modified_at DateTime @updatedAt
  modifier_id String?
  modifier    User?    @relation(name: "boards_modifier", fields: [modifier_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  lists         List[]
  cards         Card[]
  users         BoardUser[]
  organizations BoardOrganization[]

  @@map("boards")
}

model BoardUser {
  id String @id @default(uuid())

  board_id String
  board    Board  @relation(fields: [board_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  user_id String
  user    User   @relation(name: "boards_joined", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  added_at DateTime @default(now())
  adder_id String?
  adder    User?    @relation(name: "board_users_added", fields: [adder_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("board_users")
}

model BoardOrganization {
  id String @id @default(uuid())

  board_id String
  board    Board  @relation(fields: [board_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  organization_id String
  organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  added_at DateTime @default(now())
  adder_id String?
  adder    User?    @relation(name: "board_organizations_added", fields: [adder_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("board_organizations")
}

// ------------------------------
// [Lists]
// ------------------------------

model List {
  id          String  @id @default(nanoid(8))
  title       String
  color       String?
  description String?
  order       Int
  locked      Boolean @default(false)
  max_cards   Int?

  board_id String
  board    Board  @relation(fields: [board_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now())
  creator_id String?
  creator    User?    @relation(name: "lists_created", fields: [creator_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modified_at DateTime @updatedAt
  modifier_id String?
  modifier    User?    @relation(name: "lists_modified", fields: [modifier_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  cards Card[]

  @@map("lists")
}

// ------------------------------
// [Cards]
// ------------------------------

model Card {
  id          String    @id @default(nanoid(8))
  title       String
  description String?
  order       Int
  start_date  DateTime?
  due_date    DateTime?

  board_id String
  board    Board  @relation(fields: [board_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  list_id String
  list    List   @relation(fields: [list_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  cover_attachment_id String?     @unique
  cover               Attachment? @relation(fields: [cover_attachment_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  created_at DateTime @default(now())
  creator_id String?
  creator    User?    @relation(name: "cards_created", fields: [creator_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modified_at DateTime @updatedAt
  modifier_id String?
  modifier    User?    @relation(name: "cards_modified", fields: [modifier_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  users       CardUser[]
  labels      CardLabel[]
  attachments CardAttachment[]
  checklists  CardChecklist[]
  timers      CardTimer[]

  @@map("cards")
}

model CardLabel {
  id String @id @default(uuid())

  card_id String
  card    Card   @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  label_id String
  label    Label  @relation(fields: [label_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  added_at DateTime @default(now())
  adder_id String?
  adder    User?    @relation(name: "card_labels_created", fields: [adder_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("card_labels")
}

model CardUser {
  id         String  @id @default(uuid())
  subscribed Boolean @default(false)

  user_id String
  user    User   @relation(name: "cards_joined", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  card_id String
  card    Card   @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  added_at DateTime @default(now())
  adder_id String?
  adder    User?    @relation(name: "card_users_added", fields: [adder_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("card_users")
}

model CardAttachment {
  id String @id @default(uuid())

  card_id String
  card    Card   @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  attachment_id String
  attachment    Attachment @relation(fields: [attachment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  added_at DateTime @default(now())
  adder_id String?
  adder    User?    @relation(name: "card_attachments_created", fields: [adder_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("card_attachments")
}

model CardTimer {
  id          String  @id @default(uuid())
  description String?

  card_id String
  card    Card   @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  started_at DateTime @default(now())
  starter_id String?
  stater     User?    @relation(name: "card_timers_started", fields: [starter_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  ended_at DateTime?
  ender_id String?
  ender    User?     @relation(name: "card_timers_ended", fields: [ender_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("card_timers")
}

model CardChecklist {
  id    String @id @default(uuid())
  title String

  card_id String
  card    Card   @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now())
  creator_id String?
  creator    User?    @relation(name: "checklists_created", fields: [creator_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modified_at DateTime @updatedAt
  modifier_id String?
  modifier    User?    @relation(name: "checklists_modified", fields: [modifier_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  tasks CardChecklistTask[]

  @@map("card_checklists")
}

model CardChecklistTask {
  id         String    @id @default(uuid())
  title      String
  completed  Boolean   @default(false)
  start_date DateTime?
  due_date   DateTime?
  order      Int

  checklist_id String
  checklist    CardChecklist @relation(fields: [checklist_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  parent_checklist_task_id String?
  parent_checklist_task    CardChecklistTask? @relation(name: "parent_checklist_task", fields: [parent_checklist_task_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  created_at DateTime @default(now())
  creator_id String?
  creator    User?    @relation(name: "checklist_tasks_created", fields: [creator_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modified_at DateTime @updatedAt
  modifier_id String?
  modifier    User?    @relation(name: "checklist_tasks_modified", fields: [modifier_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  users    CardChecklistTaskUser[]
  subtasks CardChecklistTask[]     @relation(name: "parent_checklist_task")

  @@map("card_checklist_tasks")
}

model CardChecklistTaskUser {
  id String @id @default(uuid())

  task_id String
  task    CardChecklistTask @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  user_id String
  user    User   @relation(name: "checklist_tasks_joined", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  added_at DateTime @default(now())
  adder_id String?
  adder    User?    @relation(name: "checklist_task_users_added", fields: [adder_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("card_checklist_task_users")
}

// ------------------------------
// [Activities]
// ------------------------------

enum ActivityAction {
  CREATE
  UPDATE
  DELETE
  JOIN
  LEAVE
  ADD
  REMOVE
  START
  END
}

enum ActivityObject {
  USER

  ORGANIZATION
  PROJECT

  BOARD
  LIST
  CARD

  CHECKLIST
  TASK
  LABEL
  ATTACHMENT
  TIMER
  COMMENT
}

model Activity {
  id       String         @id @default(uuid())
  message  String?
  activity String?
  action   ActivityAction
  old_data String?
  new_data String?

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // If object is USER, object_id is user_id, if object is ORGANIZATION, object_id is organization_id, etc. 
  // If object is GLOBAL, object_id is NULL
  object_id   String
  object_type ActivityObject

  created_at DateTime @default(now())
  creator_id String?
  creator    User?    @relation(name: "activities_created", fields: [creator_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modified_at DateTime @updatedAt
  // No need for modifier_id, since activities are only modified by the system or the user who created it

  @@map("activities")
}
