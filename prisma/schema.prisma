// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------
// [FLOWS]
// 1. Create a User
// 2. User can create an Organization
//    - If User create an Organization, User will be the Owner of the Organization
//    - User can also invite other Users to join the Organization
//    - User can create a custom Role for the Organization and assign it to other Users
// 3. User create a Project
//    - User can invite other Users to join the Project
//    - User can also invite other Organizations to join the Project, it will invite all Users in the invited Organization
//    - User can create a custom Role for the Project and assign it to other Users and Organizations, if the role is assigned to an Organization, it will assign the role to all Users in the Organization
// 4. Inside a Project, User create a Board
//    - User can invite other Users to join the Board
//    - User can also invite other Organizations to join the Board, it will invite all Users in the invited Organization
//    - User can create a custom Role for the Board and assign it to other Users and Organizations, if the role is assigned to an Organization, it will assign the role to all Users in the Organization
// 5. Inside a Board, there is a set of Lists (e.g. TODO, IN PROGRESS, DONE) which each List has a set of Cards (e.g. Card 1, Card 2, Card 3)
// 6. Inside a Card, there is a set of Activities (e.g. Activity 1, Activity 2, Activity 3), it can be a comment, a file upload, a label change, etc.
//    - Activities can be created by Users, or System
//    - System Activities are created by the System, e.g. when a User is invited to a Project, the System will create an Activity to notify the User
//    - A card can mirror a Checklist from another card. All changes in the Checklist or in the mirrored one will be reflected to the other one.
//    - A card can also mirror an Attachment from another card. All changes in the Attachment or in the mirrored one will be reflected to the other one.
// ------------------------------

// ------------------------------
// [GLOBAL NOTES]
// - Junction tables are used to map many-to-many relationships, it only have `added_at` and `adder_id` fields
// ------------------------------

// ------------------------------
// [Roles]
// ------------------------------

enum RoleLevel {
  USER
  ORGANIZATION
  PROJECT
  BOARD
}

model Role {
  id          String    @id @default(uuid())
  name        String
  description String?
  level       RoleLevel

  // Global roles (e.g. Admin, Guest) will NOT have `organization_id`
  // Custom roles (e.g. Project Manager, Developer) will have `organization_id`
  organizationId String?       @map("organization_id")
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  creatorId String?  @map("creator_id")
  creator   User?    @relation(name: "roles_created", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modifiedAt DateTime @updatedAt @map("modified_at")
  modifierId String?  @map("modifier_id")
  modifier   User?    @relation(name: "roles_modified", fields: [modifierId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // (User Level Permissions)
  // - These permissions are internal only, they are not exposed to the User
  VIEW_USER                     Boolean @default(false)
  EDIT_USER                     Boolean @default(false)
  DELETE_USER                   Boolean @default(false)
  ADD_ORGANIZATION_TO_USER      Boolean @default(false)
  REMOVE_ORGANIZATION_FROM_USER Boolean @default(false)

  // (Organization Level Permissions)
  // - Inherits all User Level Permissions
  // - Internal for organization members only
  EDIT_ORGANIZATION             Boolean @default(false)
  DELETE_ORGANIZATION           Boolean @default(false)
  ADD_USER_TO_ORGANIZATION      Boolean @default(false)
  REMOVE_USER_FROM_ORGANIZATION Boolean @default(false)
  CREATE_PROJECT                Boolean @default(false)

  // (Project Level Permissions)
  // - Applies to all projects within the organization
  // - Inherits all Organization, and User Level Permissions
  // - Works for collaborators & organization members
  VIEW_PROJECT                     Boolean @default(false)
  EDIT_PROJECT                     Boolean @default(false)
  DELETE_PROJECT                   Boolean @default(false)
  ADD_USER_TO_PROJECT              Boolean @default(false)
  REMOVE_USER_FROM_PROJECT         Boolean @default(false)
  ADD_ORGANIZATION_TO_PROJECT      Boolean @default(false)
  REMOVE_ORGANIZATION_FROM_PROJECT Boolean @default(false)
  CREATE_BOARD                     Boolean @default(false)

  // (Board Level Permissions)
  // - Applies to all boards within the organization
  // - Inherits all Project, Organization, and User Level Permissions
  // - Works for collaborators & organization members
  VIEW_BOARD                     Boolean @default(false)
  EDIT_BOARD                     Boolean @default(false)
  DELETE_BOARD                   Boolean @default(false)
  ADD_USER_TO_BOARD              Boolean @default(false)
  REMOVE_USER_FROM_BOARD         Boolean @default(false)
  ADD_ORGANIZATION_TO_BOARD      Boolean @default(false)
  REMOVE_ORGANIZATION_FROM_BOARD Boolean @default(false)
  CREATE_LIST                    Boolean @default(false)
  DELETE_LIST                    Boolean @default(false)
  CREATE_CARD                    Boolean @default(false)
  DELETE_CARD                    Boolean @default(false)

  users                User[]
  organizationUsers    OrganizationUser[]
  projectUsers         ProjectUser[]
  projectOrganizations ProjectOrganization[]
  boardUsers           BoardUser[]
  boardOrganizations   BoardOrganization[]

  @@map("roles")
}

// ------------------------------
// [Labels]
// ------------------------------

model Label {
  id          String  @id @default(uuid())
  name        String
  description String?
  color       String?

  createdAt DateTime @default(now()) @map("created_at")
  creatorId String?  @map("creator_id")
  creator   User?    @relation(name: "labels_created", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modifiedAt DateTime @updatedAt @map("modified_at")
  modifierId String?  @map("modifier_id")
  modifier   User?    @relation(name: "labels_modified", fields: [modifierId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  cards CardLabel[]

  @@map("labels")
}

// ------------------------------
// [Attachments]
// ------------------------------

enum AttachmentProvider {
  LOCAL
  S3
}

model AttachmentStorage {
  id       String             @id @default(uuid())
  provider AttachmentProvider

  attachments Attachment[]

  @@map("attachment_storage")
}

model Attachment {
  id             String @id @default(uuid())
  title          String
  filenameDisk   String @map("filename_disk")
  filenameSource String @map("filename_source")
  size           Int
  type           String

  storageId String            @map("storage_id")
  storage   AttachmentStorage @relation(fields: [storageId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  ownerId String @map("owner_id")
  owner   User   @relation(name: "attachments_owned", fields: [ownerId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  uploadedAt DateTime @default(now()) @map("uploaded_at")
  uploaderId String?  @map("uploader_id")
  uploader   User?    @relation(name: "attachments_created", fields: [uploaderId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modifiedAt DateTime @updatedAt @map("modified_at")
  modifierId String?  @map("modifier_id")
  modifier   User?    @relation(name: "attachments_modified", fields: [modifierId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  userImages User[] @relation("user_images")
  userCovers User[] @relation("user_covers")

  organizations Organization[] @relation("organization_logos")

  projectLogos  Project[] @relation("project_logos")
  projectCovers Project[] @relation("project_covers")

  cardCovers Card[]

  cardsLinked CardAttachment[]

  @@map("attachments")
}

// ------------------------------
// [Authentication]
// ------------------------------

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ------------------------------
// [Users]
// ------------------------------

model User {
  id       String  @id @default(uuid())
  name     String
  username String? @unique
  email    String  @unique
  phone    String?

  language           String  @default("en-US")
  subscribeByDefault Boolean @default(true) @map("subscribe_by_default")
  subscribeToEmail   Boolean @default(true) @map("subscribe_to_email")

  createdAt  DateTime  @default(now()) @map("created_at")
  verifiedAt DateTime? @map("verified_at")
  modifiedAt DateTime  @updatedAt @map("modified_at")

  imageAttachmentId String?     @map("image_attachment_id")
  image             Attachment? @relation(name: "user_images", fields: [imageAttachmentId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  coverAttachmentId String?     @unique @map("cover_attachment_id")
  cover             Attachment? @relation(name: "user_covers", fields: [coverAttachmentId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  roleId String @map("role_id")
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // Roles
  rolesCreated  Role[] @relation("roles_created")
  rolesModified Role[] @relation("roles_modified")

  // Labels
  labelsCreated  Label[] @relation("labels_created")
  labelsModified Label[] @relation("labels_modified")

  // Attachments
  attachments         Attachment[] @relation("attachments_owned")
  attachmentsCreated  Attachment[] @relation("attachments_created")
  attachmentsModified Attachment[] @relation("attachments_modified")

  // Organizations
  organizationsOwned    Organization[] @relation("organizations_owned")
  organizationsCreated  Organization[] @relation("organizations_created")
  organizationsModified Organization[] @relation("organizations_modified")

  organizations          OrganizationUser[] @relation("organizations_joined")
  organizationUsersAdded OrganizationUser[] @relation("organization_users_added")

  // Projects
  projectsCreated  Project[] @relation("projects_created")
  projectsModified Project[] @relation("projects_modified")

  projects                  ProjectUser[]         @relation("projects_joined")
  projectUsersAdded         ProjectUser[]         @relation("project_users_added")
  projectOrganizationsAdded ProjectOrganization[] @relation("project_organizations_added")

  // Boards
  boardsCreated  Board[] @relation("boards_created")
  boardsModified Board[] @relation("boards_modifier")

  boards                  BoardUser[]         @relation("boards_joined")
  boardUsersAdded         BoardUser[]         @relation("board_users_added")
  boardOrganizationsAdded BoardOrganization[] @relation("board_organizations_added")

  // Lists
  listsCreated  List[] @relation("lists_created")
  listsModified List[] @relation("lists_modified")

  // Cards
  cardsCreated  Card[] @relation("cards_created")
  cardsModified Card[] @relation("cards_modified")

  cards          CardUser[] @relation("cards_joined")
  cardUsersAdded CardUser[] @relation("card_users_added")

  cardTimersStarted CardTimer[] @relation("card_timers_started")
  cardTimersEnded   CardTimer[] @relation("card_timers_ended")

  cardLabelsCreated      CardLabel[]      @relation("card_labels_created")
  cardAttachmentsCreated CardAttachment[] @relation("card_attachments_created")

  // Checklists
  checklistTasks          CardChecklistTaskUser[] @relation("checklist_tasks_joined")
  checklistTaskUsersAdded CardChecklistTaskUser[] @relation("checklist_task_users_added")

  checklistsCreated  CardChecklist[] @relation("checklists_created")
  checklistsModified CardChecklist[] @relation("checklists_modified")

  checklistTasksCreated  CardChecklistTask[] @relation("checklist_tasks_created")
  checklistTasksModified CardChecklistTask[] @relation("checklist_tasks_modified")

  // Activities
  activities        Activity[]
  activitiesCreated Activity[] @relation("activities_created")

  accounts UserAccount[]
  sessions UserSession[]

  @@map("users")
}

enum UserAccountProvider {
  oauth
  email
  credentials
}

model UserAccount {
  id     String @id @default(uuid())
  userId String @map("user_id")

  provider          String
  providerAccountId String              @map("provider_account_id")
  type              UserAccountProvider

  scope        String?
  sessionState String? @map("session_state")

  tokenId      String? @map("token_id")
  tokenType    String? @map("token_type")
  refreshToken String? @map("refresh_token")
  accessToken  String? @map("access_token")

  oauthTokenSecret String? @map("oauth_token_secret")
  oauthToken       String? @map("oauth_token")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiredAt Int?     @map("expired_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
  @@map("user_accounts")
}

model UserSession {
  id           String @id @default(cuid())
  userId       String @map("user_id")
  sessionToken String @unique @map("session_token")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiredAt DateTime @map("expired_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_sessions")
}

// ------------------------------
// [Organizations]
// - Each organization has a list of users and projects
// - If an organization is deleted, all users and projects are deleted
// - If a project is assigned to an organization, all members within the organization are assigned to the project
// ------------------------------

model Organization {
  id          String  @id @default(uuid())
  name        String
  description String?

  ownerId String @map("owner_id")
  owner   User   @relation(name: "organizations_owned", fields: [ownerId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  logoAttachmentId String?     @map("logo_attachment_id")
  logo             Attachment? @relation(name: "organization_logos", fields: [logoAttachmentId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  creatorId String?  @map("creator_id")
  creator   User?    @relation(name: "organizations_created", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modifiedAt DateTime @updatedAt @map("modified_at")
  modifierId String?  @map("modifier_id")
  modifier   User?    @relation(name: "organizations_modified", fields: [modifierId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  projects         Project[]
  users            OrganizationUser[]
  boards           BoardOrganization[]
  externalProjects ProjectOrganization[]
  customRoles      Role[]

  @@map("organizations")
}

model OrganizationUser {
  id String @id @default(uuid())

  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String @map("user_id")
  user   User   @relation(name: "organizations_joined", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  roleId String @map("role_id")
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  addedAt DateTime @default(now()) @map("added_at")
  adderId String?  @map("adder_id")
  adder   User?    @relation(name: "organization_users_added", fields: [adderId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("organization_users")
}

// ------------------------------
// [Projects]
// - A project can be shared with multiple users and organizations
// ------------------------------

model Project {
  id          String    @id @default(nanoid(8))
  name        String
  description String?
  startDate   DateTime? @map("start_date")
  dueDate     DateTime? @map("due_date")
  password    String?

  coverAttachmentId String?     @map("cover_attachment_id")
  cover             Attachment? @relation(name: "project_covers", fields: [coverAttachmentId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  logoAttachmentId String?     @map("logo_attachment_id")
  logo             Attachment? @relation(name: "project_logos", fields: [logoAttachmentId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  creatorId String?  @map("creator_id")
  creator   User?    @relation(name: "projects_created", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modifiedAt DateTime @updatedAt @map("modified_at")
  modifierId String?  @map("modifier_id")
  modifier   User?    @relation(name: "projects_modified", fields: [modifierId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  boards        Board[]
  users         ProjectUser[]
  organizations ProjectOrganization[]

  @@map("projects")
}

model ProjectUser {
  id String @id @default(uuid())

  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String @map("user_id")
  user   User   @relation(name: "projects_joined", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  roleId String @map("role_id")
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  addedAt DateTime @default(now()) @map("added_at")
  adderId String?  @map("adder_id")
  adder   User?    @relation(name: "project_users_added", fields: [adderId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("project_users")
}

model ProjectOrganization {
  id String @id @default(uuid())

  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  roleId String @map("role_id")
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  addedAt DateTime @default(now()) @map("added_at")
  adderId String?  @map("adder_id")
  adder   User?    @relation(name: "project_organizations_added", fields: [adderId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("project_organizations")
}

// ------------------------------
// [Boards]
// ------------------------------

model Board {
  id          String  @id @default(nanoid(8))
  name        String
  description String?
  locked      Boolean @default(false)
  password    String?

  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  creatorId String?  @map("creator_id")
  creator   User?    @relation(name: "boards_created", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modifiedAt DateTime @updatedAt @map("modified_at")
  modifierId String?  @map("modifier_id")
  modifier   User?    @relation(name: "boards_modifier", fields: [modifierId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  lists         List[]
  cards         Card[]
  users         BoardUser[]
  organizations BoardOrganization[]

  @@map("boards")
}

model BoardUser {
  id String @id @default(uuid())

  boardId String @map("board_id")
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String @map("user_id")
  user   User   @relation(name: "boards_joined", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  roleId String @map("role_id")
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  addedAt DateTime @default(now()) @map("added_at")
  adderId String?  @map("adder_id")
  adder   User?    @relation(name: "board_users_added", fields: [adderId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("board_users")
}

model BoardOrganization {
  id String @id @default(uuid())

  boardId String @map("board_id")
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  roleId String @map("role_id")
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  addedAt DateTime @default(now()) @map("added_at")
  adderId String?  @map("adder_id")
  adder   User?    @relation(name: "board_organizations_added", fields: [adderId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("board_organizations")
}

// ------------------------------
// [Lists]
// ------------------------------

model List {
  id          String  @id @default(nanoid(8))
  title       String
  color       String?
  description String?
  order       Int
  locked      Boolean @default(false)
  maxCards    Int?    @map("max_cards")

  boardId String @map("board_id")
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  creatorId String?  @map("creator_id")
  creator   User?    @relation(name: "lists_created", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modifiedAt DateTime @updatedAt @map("modified_at")
  modifierId String?  @map("modifier_id")
  modifier   User?    @relation(name: "lists_modified", fields: [modifierId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  cards Card[]

  @@map("lists")
}

// ------------------------------
// [Cards]
// ------------------------------

model Card {
  id          String    @id @default(nanoid(8))
  title       String
  description String?
  order       Int
  startDate   DateTime? @map("start_date")
  dueDate     DateTime? @map("due_date")

  boardId String @map("board_id")
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  listId String @map("list_id")
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  coverAttachmentId String?     @unique @map("cover_attachment_id")
  cover             Attachment? @relation(fields: [coverAttachmentId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  creatorId String?  @map("creator_id")
  creator   User?    @relation(name: "cards_created", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modifiedAt DateTime @updatedAt @map("modified_at")
  modifierId String?  @map("modifier_id")
  modifier   User?    @relation(name: "cards_modified", fields: [modifierId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  users       CardUser[]
  labels      CardLabel[]
  attachments CardAttachment[]
  checklists  CardChecklist[]
  timers      CardTimer[]

  @@map("cards")
}

model CardLabel {
  id String @id @default(uuid())

  cardId String @map("card_id")
  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  labelId String @map("label_id")
  label   Label  @relation(fields: [labelId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  addedAt DateTime @default(now()) @map("added_at")
  adderId String?  @map("adder_id")
  adder   User?    @relation(name: "card_labels_created", fields: [adderId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("card_labels")
}

model CardUser {
  id         String  @id @default(uuid())
  subscribed Boolean @default(false)

  userId String @map("user_id")
  user   User   @relation(name: "cards_joined", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  cardId String @map("card_id")
  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  addedAt DateTime @default(now()) @map("added_at")
  adderId String?  @map("adder_id")
  adder   User?    @relation(name: "card_users_added", fields: [adderId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("card_users")
}

model CardAttachment {
  id String @id @default(uuid())

  cardId String @map("card_id")
  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  attachmentId String     @map("attachment_id")
  attachment   Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  addedAt DateTime @default(now()) @map("added_at")
  adderId String?  @map("adder_id")
  adder   User?    @relation(name: "card_attachments_created", fields: [adderId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("card_attachments")
}

model CardTimer {
  id          String  @id @default(uuid())
  description String?

  cardId String @map("card_id")
  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  startedAt DateTime @default(now()) @map("started_at")
  starterId String?  @map("starter_id")
  stater    User?    @relation(name: "card_timers_started", fields: [starterId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  endedAt DateTime? @map("ended_at")
  enderId String?   @map("ender_id")
  ender   User?     @relation(name: "card_timers_ended", fields: [enderId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("card_timers")
}

model CardChecklist {
  id    String @id @default(uuid())
  title String

  cardId String @map("card_id")
  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  creatorId String?  @map("creator_id")
  creator   User?    @relation(name: "checklists_created", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modifiedAt DateTime @updatedAt @map("modified_at")
  modifierId String?  @map("modifier_id")
  modifier   User?    @relation(name: "checklists_modified", fields: [modifierId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  tasks CardChecklistTask[]

  @@map("card_checklists")
}

model CardChecklistTask {
  id        String    @id @default(uuid())
  title     String
  completed Boolean   @default(false)
  startDate DateTime? @map("start_date")
  dueDate   DateTime? @map("due_date")
  order     Int

  checklistId String        @map("checklist_id")
  checklist   CardChecklist @relation(fields: [checklistId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  parentChecklistTaskId String?            @map("parent_checklist_task_id")
  parentChecklistTask   CardChecklistTask? @relation(name: "parent_checklist_task", fields: [parentChecklistTaskId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  creatorId String?  @map("creator_id")
  creator   User?    @relation(name: "checklist_tasks_created", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modifiedAt DateTime @updatedAt @map("modified_at")
  modifierId String?  @map("modifier_id")
  modifier   User?    @relation(name: "checklist_tasks_modified", fields: [modifierId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  users    CardChecklistTaskUser[]
  subtasks CardChecklistTask[]     @relation(name: "parent_checklist_task")

  @@map("card_checklist_tasks")
}

model CardChecklistTaskUser {
  id String @id @default(uuid())

  taskId String            @map("task_id")
  task   CardChecklistTask @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String @map("user_id")
  user   User   @relation(name: "checklist_tasks_joined", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  addedAt DateTime @default(now()) @map("added_at")
  adderId String?  @map("adder_id")
  adder   User?    @relation(name: "checklist_task_users_added", fields: [adderId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("card_checklist_task_users")
}

// ------------------------------
// [Activities]
// ------------------------------

enum ActivityAction {
  CREATE
  UPDATE
  DELETE
  JOIN
  LEAVE
  ADD
  REMOVE
  START
  END
}

enum ActivityObject {
  USER

  ORGANIZATION
  PROJECT

  BOARD
  LIST
  CARD

  CHECKLIST
  TASK
  LABEL
  ATTACHMENT
  TIMER
  COMMENT
}

model Activity {
  id       String         @id @default(uuid())
  message  String?
  activity String?
  action   ActivityAction
  oldData  String?        @map("old_data")
  newData  String?        @map("new_data")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // If object is USER, object_id is user_id, if object is ORGANIZATION, object_id is organization_id, etc. 
  // If object is GLOBAL, object_id is NULL
  objectId   String         @map("object_id")
  objectType ActivityObject @map("object_type")

  createdAt DateTime @default(now()) @map("created_at")
  creatorId String?  @map("creator_id")
  creator   User?    @relation(name: "activities_created", fields: [creatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  modifiedAt DateTime @updatedAt @map("modified_at")
  // No need for modifier_id, since activities are only modified by the system or the user who created it

  @@map("activities")
}
