// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Flows: User -> Organization (optional) -> Project -> Board -> List -> Card -> Activity

// ------------------------------
// [Globals]
// 1. This is a global models that are used in multiple places
// ------------------------------

// Instead of using roles, we use a table that lists all the permissions 
// and map them to users and organizations
model permissions {
  id String @id @default(uuid())

  name        String
  description String

  created_at DateTime @default(now())

  users_map                 user_permissions[]
  organization_users_map    organization_user_permissions[]
  project_users_map         project_user_permissions[]
  project_organizations_map project_organization_permissions[]
}

model labels {
  id         String  @id @default(uuid())
  creator_id String?

  name        String
  description String
  color       String

  created_at DateTime @default(now())

  creator users? @relation(fields: [creator_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  cards card_labels[]
}

model attachments {
  id          String  @id @default(uuid())
  uploader_id String
  modifier_id String?

  title           String
  filename_disk   String
  filename_source String
  type            String
  storage         attachment_storage

  created_at DateTime  @default(now())
  updated_at DateTime?

  uploader users  @relation(fields: [uploader_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  modifier users? @relation("attachment_modifier", fields: [modifier_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  cards_assigned card_attachments[]
}

enum attachment_storage {
  Local
  S3
}

// ------------------------------
// [Organizations]
// 1. Each organization has a list of users and projects
// 2. If an organization is deleted, all users and projects are deleted
// 3. If a project is assigned to an organization, all members within the organization are assigned to the project
// ------------------------------

model organizations {
  id         String @id @default(uuid())
  creator_id String

  name        String
  description String

  created_at DateTime @default(now())

  creator users @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  users_joined    organization_users[]
  projects_joined project_organizations[]
}

model organization_users {
  id              String @id @default(uuid())
  user_id         String
  organization_id String

  added_at DateTime @default(now())

  user         users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organization organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  permissions organization_user_permissions[]
}

model organization_user_permissions {
  id                   String @id @default(uuid())
  organization_user_id String
  permission_id        String

  added_at DateTime @default(now())

  organization_user organization_users @relation(fields: [organization_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission        permissions        @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// ------------------------------
// Users
// ------------------------------

model users {
  id       String  @id @default(uuid())
  name     String
  username String? @unique
  email    String  @unique
  phone    String?
  password String

  image_url            String?
  language             String  @default("en-US")
  subscribe_by_default Boolean @default(true)
  subscribe_to_email   Boolean @default(true)

  created_at DateTime @default(now())

  permissions     user_permissions[]
  labels_created  labels[]
  projects_joined project_users[]

  organizations_created organizations[]
  organizations_joined  organization_users[]

  cards_created cards[]
  cards_joined  card_users[]

  tasks      checklist_task_users[]
  activities activities[]

  attachments          attachments[]
  attachment_modifieds attachments[] @relation("attachment_modifier")
}

model user_permissions {
  id            String @id @default(uuid())
  user_id       String
  permission_id String

  added_at DateTime @default(now())

  user       users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// ------------------------------
// Projects
// ------------------------------

model projects {
  id          String  @id @default(uuid())
  name        String
  description String? @db.LongText

  boards               boards[]
  users_joined         project_users[]
  organizations_joined project_organizations[]
}

model project_organizations {
  id              String @id @default(uuid())
  project_id      String
  organization_id String

  project      projects      @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organization organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  permissions project_organization_permissions[]
}

model project_organization_permissions {
  id                      String @id @default(uuid())
  permission_id           String
  project_organization_id String

  permission   permissions           @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organization project_organizations @relation(fields: [project_organization_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model project_users {
  id         String @id @default(uuid())
  user_id    String
  project_id String

  user    users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project projects @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  permissions project_user_permissions[]
}

model project_user_permissions {
  id              String @id @default(uuid())
  permission_id   String
  project_user_id String

  user       project_users @relation(fields: [project_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission permissions   @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// ------------------------------
// Boards
// ------------------------------

model boards {
  id         String @id @default(uuid())
  project_id String

  name        String
  description String? @db.LongText

  project projects @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  lists lists[]
}

// ------------------------------
// Lists
// ------------------------------
model lists {
  id       String @id @default(uuid())
  board_id String

  title String
  order Int    @default(0)

  board boards @relation(fields: [board_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  cards cards[]
}

// ------------------------------
// Cards
// ------------------------------

model cards {
  id                  String  @id @default(uuid())
  board_id            String
  list_id             String
  cover_attachment_id String? @unique

  title       String
  description String?   @db.LongText
  order       Int       @default(0)
  start_date  DateTime?
  due_date    DateTime?

  created_by String?
  created_at DateTime @default(now())

  list    lists             @relation(fields: [list_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creator users?            @relation(fields: [created_by], references: [id], onDelete: SetNull, onUpdate: Cascade)
  cover   card_attachments? @relation("card_cover", fields: [cover_attachment_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  activities  activities[]
  users       card_users[]
  labels      card_labels[]
  attachments card_attachments[]
  checklists  card_checklists[]
  timers      card_timers[]
}

model card_labels {
  id       String @id @default(uuid())
  card_id  String
  label_id String

  added_at DateTime @default(now())

  card  cards?  @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  label labels? @relation(fields: [label_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model card_users {
  id      String @id @default(uuid())
  user_id String
  card_id String

  subscribed Boolean @default(false)

  added_at DateTime @default(now())

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  card cards @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model card_attachments {
  id            String @id @default(uuid())
  card_id       String
  attachment_id String

  added_at DateTime @default(now())

  cards      cards       @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attachment attachments @relation(fields: [attachment_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  is_cover_of cards? @relation("card_cover")
}

model card_checklists {
  id           String @id @default(uuid())
  card_id      String
  checklist_id String

  card      cards      @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  checklist checklists @relation(fields: [checklist_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model card_timers {
  id      String @id @default(uuid())
  card_id String

  started_at DateTime? @default(now())
  ended_at   DateTime?

  card cards @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// ------------------------------
// Checklists
// ------------------------------

model checklists {
  id    String @id @default(uuid())
  title String

  created_at DateTime  @default(now())
  updated_at DateTime?

  tasks          checklist_tasks[]
  cards_assigned card_checklists[]
}

model checklist_tasks {
  id           String @id @default(uuid())
  checklist_id String

  text       String
  completed  Boolean   @default(false)
  start_date DateTime?
  due_date   DateTime?

  created_at DateTime  @default(now())
  updated_at DateTime?

  checklist checklists @relation(fields: [checklist_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  users checklist_task_users[]
}

model checklist_task_users {
  id      String @id @default(uuid())
  task_id String
  user_id String

  added_at DateTime @default(now())

  task checklist_tasks @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// ------------------------------
// Activities
// ------------------------------

model activities {
  id      String @id @default(uuid())
  user_id String
  card_id String

  message  String? @db.LongText
  activity String?

  created_at DateTime @default(now())

  card cards @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
